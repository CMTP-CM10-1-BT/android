From a2009452b9a267e1dfeea657a3ce898238705f94 Mon Sep 17 00:00:00 2001
From: flintman <flintman@flintmancomputers.com>
Date: Tue, 19 Nov 2013 16:25:14 +0100
Subject: [PATCH] tinyalsa: properly support multivalued controls

---
 include/tinyalsa/asoundlib.h |  1 +
 mixer.c                      | 42 ++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 43 insertions(+)

diff --git a/include/tinyalsa/asoundlib.h b/include/tinyalsa/asoundlib.h
index ec526e6..72c7c54 100644
--- a/include/tinyalsa/asoundlib.h
+++ b/include/tinyalsa/asoundlib.h
@@ -253,6 +253,7 @@ int mixer_ctl_get_value(struct mixer_ctl *ctl, unsigned int id);
 int mixer_ctl_get_array(struct mixer_ctl *ctl, void *array, size_t count);
 int mixer_ctl_set_value(struct mixer_ctl *ctl, unsigned int id, int value);
 int mixer_ctl_set_array(struct mixer_ctl *ctl, const void *array, size_t count);
+int mixer_ctl_set_multivalue(struct mixer_ctl *ctl, unsigned int num, int *values);
 int mixer_ctl_set_enum_by_string(struct mixer_ctl *ctl, const char *string);
 
 /* Determe range of integer mixer controls */
diff --git a/mixer.c b/mixer.c
index 4568cca..9c3ec0d 100644
--- a/mixer.c
+++ b/mixer.c
@@ -436,6 +436,48 @@ int mixer_ctl_set_array(struct mixer_ctl *ctl, const void *array, size_t count)
     return ioctl(ctl->mixer->fd, SNDRV_CTL_IOCTL_ELEM_WRITE, &ev);
 }
 
+int mixer_ctl_set_multivalue(struct mixer_ctl *ctl, unsigned int num, int *values)
+{
+    struct snd_ctl_elem_value ev;
+    unsigned int i;
+    int ret;
+
+    if (!ctl || (num > ctl->info->count))
+        return -EINVAL;
+
+    memset(&ev, 0, sizeof(ev));
+    ev.id.numid = ctl->info->id.numid;
+
+    switch (ctl->info->type) {
+    case SNDRV_CTL_ELEM_TYPE_BOOLEAN:
+        for (i=0; i < 16; i++) {
+            ev.value.integer.value[i] = 0;
+        }
+        for (i=0; i < num; i++) {
+            ev.value.integer.value[i] = !!(values[i]);
+        }
+        break;
+
+    case SNDRV_CTL_ELEM_TYPE_INTEGER:
+        for (i=0; i < 16; i++) {
+            ev.value.integer.value[i] = 0;
+        }
+        for (i=0; i < num; i++) {
+            ev.value.integer.value[i] = values[i];
+        }
+        break;
+
+    case SNDRV_CTL_ELEM_TYPE_ENUMERATED:
+        ev.value.enumerated.item[0] = values[0];
+        break;
+
+    default:
+        return -EINVAL;
+    }
+
+    return ioctl(ctl->mixer->fd, SNDRV_CTL_IOCTL_ELEM_WRITE, &ev);
+}
+
 int mixer_ctl_get_range_min(struct mixer_ctl *ctl)
 {
     if (!ctl || (ctl->info->type != SNDRV_CTL_ELEM_TYPE_INTEGER))
-- 
1.8.1.2

